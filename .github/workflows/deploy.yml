name: CI/CD Pipeline

env:
  IMAGE_TAG: ${{ github.sha }}

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Create env files
        run: |
          echo "VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL }}" >> frontend/.env.production
          echo "VITE_MEDIA_DOWNLOADS=${{ secrets.VITE_MEDIA_DOWNLOADS }}" >> frontend/.env.production
          cat frontend/.env.production

      - name: Build & push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/backend/Dockerfile
          push: true
          tags: |
            ghcr.io/giji676/movies/backend:latest
            ghcr.io/giji676/movies/backend:${{ env.IMAGE_TAG }}
          build-args: |
            BUILD_DATE=${{ github.run_id }}
          no-cache: true

      - name: Build & push nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/nginx/Dockerfile
          push: true
          tags: |
            ghcr.io/giji676/movies/nginx:latest
            ghcr.io/giji676/movies/nginx:${{ env.IMAGE_TAG }}
          build-args: |
            BUILD_DATE=${{ github.run_id }}

      - name: SSH and deploy on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /root/movies
            echo IMAGE_TAG=${{ github.sha }} > .env
            cat .env
            docker login ghcr.io -u giji676 -p ${{ secrets.GHCR_PAT }}
            
            # Stop containers first
            docker-compose down
            
            # Remove old images to force fresh pull
            docker rmi ghcr.io/giji676/movies/backend:latest || true
            docker rmi ghcr.io/giji676/movies/nginx:latest || true
            
            # Pull latest images
            docker-compose pull
            
            # Start with fresh containers
            docker-compose up -d --force-recreate --remove-orphans
            docker-compose exec backend python manage.py migrate
